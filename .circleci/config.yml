version: 2.1

orbs:
  win: circleci/windows@5.0
  macos: circleci/macos@2.4.1

executors:
  docker-rust:
    docker:
      # Note: Let CI use our MSRV, rather than latest
      - image: cimg/rust:1.81.0
    resource_class: small
  machine-ubuntu:
    machine:
      image: default
      docker_layer_caching: true
    resource_class: large

# sscache steps are from this guide
# https://medium.com/@edouard.oger/rust-caching-on-circleci-using-sccache-c996344f0115
commands:
  restore-cargo-and-sccache:
    parameters:
      sccache-size:
        description: Max size for the cache
        type: string
        # 500 MB is the recommended soft cap for a cache on circleci.
        # Large integration tests override this default.
        default: 500M
    steps:
      - run:
          name: Install sccache
          command: |
            SCCACHE_VERSION='v0.8.2'
            ls ~/.cargo/bin/sccache \
              || curl -L https://github.com/mozilla/sccache/releases/download/$SCCACHE_VERSION/sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl.tar.gz \
                | tar -xOz sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl/sccache \
                > ~/.cargo/bin/sccache \
              && chmod +x ~/.cargo/bin/sccache
            echo 'export RUSTC_WRAPPER=~/.cargo/bin/sccache' >> $BASH_ENV
            echo 'export SCCACHE_CACHE_SIZE=<< parameters.sccache-size >>' >> $BASH_ENV
      - run:
          name: Start sccache
          command: ~/.cargo/bin/sccache --start-server
      - restore_cache:
          name: Restore sccache cache
          keys: # Find latest cache for this job on same branch, else fall back to older cache.
            - sccache-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-
            - sccache-cache-{{ .Environment.CIRCLE_JOB }}-
      - restore_cache:
          name: Restore cargo registry cache
          keys: # This is saved once per lockfile update. If new lockfile, get an older cache.
            - cargo-{{ checksum "Cargo.lock" }}
            - cargo-
  save-sccache:
    steps:
      - run:
          name: Sccache stats
          command: sccache --show-stats
      - run:
          name: Prune old sccache items
          # Delete files that have not been accessed in 5 days
          command: |
            du -sh ~/.cache/sccache
            find ~/.cache/sccache -atime +5 | wc -l
            find ~/.cache/sccache -atime +5 -delete
            du -sh ~/.cache/sccache
      - run:
          name: Sccache stats
          command: sccache --show-stats
      - save_cache:
          name: Save sccache cache
          # We use {{ .Branch }}-{{ .Revision }} to upload a fresh cache for each commit on a branch.
          # If a new commit is built, it will fall back on the most recent cache from the same branch.
          key: sccache-cache-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - ~/.cache/sccache
  # This is only performed by the workspace clippy job, since it does the largest cargo fetch.
  # Other jobs might restore a slightly older copy of this cache.
  save-cargo-cache:
    steps:
      # Discard crates.io patches so that it produces a re-usable cache key checksum.
      - run:
          name: Restore Cargo.lock
          command: git restore Cargo.lock
      - save_cache:
          name: Save cargo cache
          # This is saved once per lockfile update.
          key: cargo-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo/registry/cache
            - ~/.cargo/registry/index
            - ~/.cargo/git/db
  apply-patches:
    steps:
      - run:
          name: Patch local crates
          command: ./scripts/apply-patches.sh
  install-rust:
    steps:
      - run:
          name: Install Rust (MSRV)
          # Note: Let CI use our MSRV, rather than latest
          command: which cargo || curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.81.0
  install-cargo-make:
    steps:
      - run:
          name: Install cargo-make
          environment:
            VERSION: "0.37.23"
          command: |
            curl -OL https://github.com/sagiegurari/cargo-make/releases/download/$VERSION/cargo-make-v$VERSION-x86_64-unknown-linux-musl.zip && \
              unzip cargo-make-v$VERSION-x86_64-unknown-linux-musl.zip && \
              mv cargo-make-v$VERSION-x86_64-unknown-linux-musl/cargo-make ~/.cargo/bin && \
              rm -rf cargo-make-v$VERSION-x86_64-unknown-linux-musl*
  install-cargo-audit:
    steps:
      - run:
          name: Install cargo-audit
          environment:
            VERSION: "v0.21.0"
          command: |
            curl -L https://github.com/rustsec/rustsec/releases/download/cargo-audit/$VERSION/cargo-audit-x86_64-unknown-linux-musl-$VERSION.tgz \
              | tar -xOz cargo-audit-x86_64-unknown-linux-musl-$VERSION/cargo-audit \
              > ~/.cargo/bin/cargo-audit \
              && chmod +x ~/.cargo/bin/cargo-audit
  set-git-tag:
    steps:
      - run:
          name: Set git tag in BASH_ENV
          command: echo TAG=$(git describe --tags --abbrev=0) >> $BASH_ENV
  make-artifact:
    parameters:
      target:
        description: "Rust target to put in artifact"
        type: string
      suffix:
        description: "Suffix that is on the binary"
        type: string
        default: ""
    steps:
      - set-git-tag
      - run:
          name: Set binary directory in the environment
          command: |
            echo BIN_DIR=cargo-shuttle-<< parameters.target >>-$TAG >> $BASH_ENV
      - run:
          name: Make artifact
          command: |
            mkdir $BIN_DIR
            mv target/<< parameters.target >>/release/cargo-shuttle<< parameters.suffix >> $BIN_DIR/cargo-shuttle<< parameters.suffix >>
            mv target/<< parameters.target >>/release/shuttle<< parameters.suffix >> $BIN_DIR/shuttle<< parameters.suffix >>
            mv LICENSE $BIN_DIR/
            mv README.md $BIN_DIR/
            mkdir -p artifacts/<< parameters.target >>
            cp $BASH_ENV artifacts/<< parameters.target >>.env
            tar -cvzf artifacts/<< parameters.target >>/cargo-shuttle-$TAG-<< parameters.target >>.tar.gz $BIN_DIR
      # Persist the bash environment to the workspace as well, we need it for the release job.
      # Make sure the name is unique, since the binaries will be built in parallel.
      # https://discuss.circleci.com/t/share-environment-variable-between-different-job/45647/4
      - persist_to_workspace:
          root: artifacts
          paths:
            - << parameters.target >>/*
            - << parameters.target >>.env

jobs:
  workspace-fmt-clippy:
    executor: docker-rust
    resource_class: xlarge
    steps:
      - checkout
      - restore-cargo-and-sccache
      - install-cargo-make
      - run: cargo make ci-workspace
      - run: curl --proto '=https' --tlsv1.2 -LsSf https://github.com/1Password/typeshare/releases/download/v1.13.0/typeshare-cli-v1.13.0-installer.sh | sh
      - run: cargo make types
      - run: cargo make check-types
      - save-sccache
      - save-cargo-cache
  cargo-audit:
    executor: docker-rust
    steps:
      - checkout
      - install-cargo-make
      - install-cargo-audit
      - run: cargo make audit
  test-standalone:
    parameters:
      path:
        description: "Path to crate external from workspace"
        type: string
    executor: docker-rust
    steps:
      - checkout
      - restore-cargo-and-sccache
      - install-cargo-make
      - apply-patches
      - run: cargo make ci-standalone << parameters.path >>
      - save-sccache
  test-workspace-member:
    parameters:
      crate:
        description: Crate in workspace to test
        type: string
    executor: docker-rust
    steps:
      - install-rust
      - checkout
      - restore-cargo-and-sccache
      - install-cargo-make
      - run: cargo make test-member << parameters.crate >>
      - save-sccache
  test-workspace-member-with-integration:
    parameters:
      crate:
        description: Crate in workspace to test
        type: string
      resource_class:
        description: The resource type to use for the machine
        type: string
      sccache-size:
        type: string
        default: 500M
    executor: docker-rust
    resource_class: << parameters.resource_class >>
    steps:
      - install-rust
      - install-cargo-make
      - checkout
      - run: git submodule update --init
      - restore-cargo-and-sccache:
          sccache-size: << parameters.sccache-size >>
      - apply-patches
      - run: cargo make test-member << parameters.crate >>
      - run: cargo make test-member-integration << parameters.crate >>
      - save-sccache
  test-workspace-member-with-integration-docker:
    parameters:
      crate:
        description: "Crate in workspace to test"
        type: string
      resource_class:
        description: The resource type to use for the machine
        type: string
      sccache-size:
        type: string
        default: 500M
    # Using a machine image since tests will start a docker container
    executor: machine-ubuntu
    resource_class: << parameters.resource_class >>
    steps:
      - install-rust
      - install-cargo-make
      - checkout
      - run: git submodule update --init
      - restore-cargo-and-sccache:
          sccache-size: << parameters.sccache-size >>
      - apply-patches
      - run: cargo make test-member-integration-docker << parameters.crate >>
      - save-sccache
  build-binaries-linux:
    machine:
      image: default
    resource_class: << parameters.resource_class >>
    parameters:
      target:
        description: "Linux target to build for"
        type: string
      resource_class:
        description: "The resource type to use for the machine"
        type: string
    steps:
      - checkout
      - run: sudo apt update && sudo DEBIAN_FRONTEND=noninteractive apt install -y libssl-dev musl-tools clang
      - run:
          name: Install Rust
          # Note: Let binary build use latest
          command: curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | bash -s -- -y --target << parameters.target >>
      - run:
          name: Build
          command: |
            # From https://github.com/briansmith/ring/issues/1414#issuecomment-1055177218
            export CC_aarch64_unknown_linux_musl=clang
            cargo build --release --package cargo-shuttle --target << parameters.target >>
      - make-artifact:
          target: << parameters.target >>
  build-binaries-windows:
    executor:
      name: win/default
      size: xlarge
      shell: bash.exe
    environment:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - checkout
      - run:
          name: Install Rust
          # Note: Let binary build use latest
          command: |
            choco uninstall rust # The one coming from choco interferes with the one coming from rustup
            wget -OutFile "C:\rustup-init.exe" https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe
            C:\rustup-init.exe -y --target x86_64-pc-windows-msvc
          shell: powershell.exe
      - run:
          name: Build
          command: |
            cargo.exe build --release --package cargo-shuttle --target x86_64-pc-windows-msvc
          shell: powershell.exe
      - make-artifact:
          target: x86_64-pc-windows-msvc
          suffix: ".exe"
  build-binaries-mac:
    macos:
      xcode: 15.3.0
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      # Necessary to build for Intel targets on m1.
      - macos/install-rosetta
      - run:
          name: Install Rust
          # Note: Let binary build use latest
          command: curl --proto '=https' https://sh.rustup.rs -sSf | bash -s -- -y --target x86_64-apple-darwin
      - run:
          name: Build
          command: |
            cargo build --release --package cargo-shuttle --target x86_64-apple-darwin
      - make-artifact:
          target: x86_64-apple-darwin
  publish-github-release-draft:
    docker:
      - image: cimg/go:1.19.3
    steps:
      - attach_workspace:
          at: artifacts
      - run:
          name: "Set tag in environment"
          command: |
            for file in artifacts/*.env; do
              cat artifacts/${file##*/} >> $BASH_ENV
              rm artifacts/${file##*/}
            done
      - run:
          name: "Publish Release on GitHub"
          # Since each binary is in a sub directory named after its target, we flatten
          # the artifacts directory before passing it to ghr
          command: |
            find artifacts -mindepth 2 -type f -exec mv -t artifacts {} +
            go install github.com/tcnksm/ghr@v0.16.2
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete -draft ${TAG} ./artifacts/
  publish-crate:
    parameters:
      path:
        description: Path to crate to publish
        type: string
    executor: docker-rust
    steps:
      - checkout
      - run:
          name: Publish crate
          # Don't build the crate, we know that the crate should build based on other workflows
          # Ignore failure if the crate is already uploaded
          command: |
            set +e
            cargo publish --no-verify --manifest-path << parameters.path >>/Cargo.toml > /tmp/publish-out 2>&1
            ERR=$?
            set -e
            if [ $ERR != 0 ] && ! grep "already uploaded" /tmp/publish-out; then
              cat /tmp/publish-out
              exit 1
            fi
workflows:
  ci:
    jobs:
      - workspace-fmt-clippy
      - test-standalone:
          name: << matrix.path >>
          matrix:
            parameters:
              path:
                - resources/aws-rds
                - resources/openai
                - resources/opendal
                - resources/qdrant
                - resources/shared-db
                - resources/turso
                - services/shuttle-actix-web
                - services/shuttle-axum
                - services/shuttle-poem
                - services/shuttle-rocket
                - services/shuttle-salvo
                - services/shuttle-serenity
                - services/shuttle-thruster
                - services/shuttle-tide
                - services/shuttle-tower
                - services/shuttle-warp
      - test-workspace-member:
          name: << matrix.crate >>
          matrix:
            parameters:
              crate:
                - shuttle-codegen
                - shuttle-common
      - test-workspace-member-with-integration:
          name: << matrix.crate >>
          matrix:
            alias: test-workspace-member-with-integration-xlarge
            parameters:
              resource_class:
                - xlarge
              sccache-size:
                - 1G
              crate:
                - cargo-shuttle
      - test-workspace-member-with-integration-docker:
          name: << matrix.crate >> with docker
          matrix:
            alias: test-workspace-member-with-integration-docker-large
            parameters:
              resource_class:
                - large
              sccache-size:
                - 750M
              crate:
                - cargo-shuttle
      - cargo-audit:
          filters:
            branches:
              only: main
  build-binaries:
    jobs:
      - build-binaries-linux:
          name: build-binaries-x86_64-gnu
          target: x86_64-unknown-linux-gnu
          resource_class: xlarge
          filters:
            branches:
              only: production
      - build-binaries-linux:
          name: build-binaries-x86_64-musl
          target: x86_64-unknown-linux-musl
          resource_class: xlarge
          filters:
            branches:
              only: production
      - build-binaries-linux:
          name: build-binaries-aarch64
          target: aarch64-unknown-linux-musl
          resource_class: arm.xlarge
          filters:
            branches:
              only: production
      - build-binaries-windows:
          filters:
            branches:
              only: production
      - build-binaries-mac:
          filters:
            branches:
              only: production
      - publish-github-release-draft:
          requires:
            - build-binaries-x86_64-gnu
            - build-binaries-x86_64-musl
            - build-binaries-aarch64
            - build-binaries-windows
            - build-binaries-mac
  publish-crates:
    jobs:
      - approve-publish-crates:
          type: approval
          filters:
            branches:
              only: production
      - publish-crate:
          matrix:
            parameters:
              path:
                - codegen
                - common
          name: publish-<< matrix.path >>
          requires:
            - approve-publish-crates
      - publish-crate:
          matrix:
            parameters:
              path:
                - api-client
                - service
          name: publish-<< matrix.path >>
          requires:
            - publish-common
      - publish-crate:
          matrix:
            parameters:
              path:
                - resources/aws-rds
                - resources/openai
                - resources/opendal
                - resources/qdrant
                - resources/shared-db
                - resources/turso
          name: publish-<< matrix.path >>
          requires:
            - publish-service
      - publish-crate:
          matrix:
            parameters:
              path:
                - runtime
                - cargo-shuttle
          name: publish-<< matrix.path >>
          requires:
            - publish-api-client
            - publish-service
      - publish-crate:
          matrix:
            parameters:
              path:
                - services/shuttle-actix-web
                - services/shuttle-axum
                - services/shuttle-poem
                - services/shuttle-rocket
                - services/shuttle-salvo
                - services/shuttle-serenity
                - services/shuttle-thruster
                - services/shuttle-tide
                - services/shuttle-tower
                - services/shuttle-warp
          name: publish-<< matrix.path >>
          requires:
            - publish-runtime
